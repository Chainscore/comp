"""
The Comptroller type has protocol level variables stored
"""
type Comptroller @entity {
  "ID is set to 1"
  id: ID!
  "Address of price oracle the comptroller uses"
  priceOracle: Bytes!
  "Factor used to determine repayAmount for liquidating"
  closeFactor: BigInt
  "The percent bonus liquidators get for liquidating"
  liquidationIncentive: BigInt
  "Max assets a single user can enter"
  maxAssets: BigInt

  markets: [Market!]! @derivedFrom(field: "comptroller")
}

"""
Market stores all high level variables for a cToken market
"""
type Market @entity {
  id: ID!
  #Fields that match compounds API
  "Exchange rate of tokens / cTokens"
  exchangeRate: BigDecimal!

  "The cToken contract balance of ERC20 or ETH"
  cash: BigDecimal!
  "Collateral factor determining how much one can borrow"
  collateralFactor: BigDecimal!

  "Reserves stored in the contract"
  reserves: BigDecimal!
  "The factor determining interest that goes to reserves"
  reserveFactor: BigInt!

  "The history of the markets borrow index return (Think S&P 500)"
  borrowIndex: BigDecimal!
  "Borrows in the market"
  totalBorrows: BigDecimal!

  "Address of the interest rate model"
  interestRateModelAddress: Bytes!

  "Yearly supply rate. With 2104400 blocks per year"
  supplyRate: BigDecimal!
  "Yearly borrow rate. With 2102400 blocks per year"
  borrowRate: BigDecimal!

  # cToken
  token: Token!
  "Underlying token address"
  underlying: Token!

  # Fields that are not in compounds api
  "Block the market is updated to"
  accrualBlockNumber: Int!
  "Timestamp the market was most recently updated"
  blockTimestamp: Int!

  comptroller: Comptroller!
  users: [AccountCToken!]! @derivedFrom(field: "market")
}

type Token @entity {
  "Token address"
  id: ID!
  "Token name"
  name: String!
  "Token symbol"
  symbol: String!
  "Token decimals, 6 for cTokens"
  decimals: Int!
  "Token decimals, 6 for cTokens"
  totalSupply: BigDecimal!
  "price in ETH"
  priceETH: BigDecimal!
  "price in USD"
  priceUSD: BigDecimal!
}

"""
Account is an ETH address, with a list of all cToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
  "User ETH address"
  id: ID!
  "Array of CTokens user is in"
  positions: [AccountCToken!]! @derivedFrom(field: "account")

  outTransferEvent: [TransferEvent!]! @derivedFrom(field: "from")
  inTransferEvent: [TransferEvent!]! @derivedFrom(field: "to")
  mintEvent: [MintEvent!]! @derivedFrom(field: "to")

  liquidatorEvent: [LiquidationEvent!]! @derivedFrom(field: "to")
  liquidatedEvent: [LiquidationEvent!]! @derivedFrom(field: "from")

  borrowEvent: [BorrowEvent!]! @derivedFrom(field: "borrower")
  repayEvent: [BorrowEvent!]! @derivedFrom(field: "borrower")

  # The following values are added by the JS Wrapper, and must be calculated with the most up
  # to date values based on the block delta for market.exchangeRate and market.borrowIndex
  # They do not need to be in the schema, but they will show up in the explorer playground

  # "If less than 1, the account can be liquidated
  health: BigDecimal!
  # "Total assets borrowed from user"
  totalBorrowValueInEth: BigDecimal!
  # "Total assets supplied by user"
  totalCollateralValueInEth: BigDecimal!
}

"""
AccountCToken is a single account within a single cToken market, with data such
as interest earned or paid
"""
type AccountCToken @entity {
  "Concatenation of CToken address and user address"
  id: ID!
  "Relation to market"
  market: Market!
  "Relation to user"
  account: Account!
  "Transactions data"
  transactions: [AccountCTokenTransaction!]! @derivedFrom(field: "account")
  "Block number this asset was updated at in the contract"
  accrualBlockNumber: BigInt!
  "True if user is entered, false if they are exited"
  enteredMarket: Boolean!

  "CToken balance of the user"
  cTokenBalance: BigDecimal!
  "Total amount of underlying supplied"
  totalUnderlyingSupplied: BigDecimal!
  "Total amount of underling redeemed"
  totalUnderlyingRedeemed: BigDecimal!
  "The value of the borrow index upon users last interaction"
  accountBorrowIndex: BigDecimal!
  "Total amount underlying borrowed, exclusive of interest"
  totalUnderlyingBorrowed: BigDecimal!
  "Total amount underlying repaid"
  totalUnderlyingRepaid: BigDecimal!
  "Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
  storedBorrowBalance: BigDecimal!

  # The following values are added by the JS Wrapper, and must be calculated with the most up
  # to date values based on the block delta for market.exchangeRate and market.borrowIndex
  # They do not need to be in the schema, but they will show up in the explorer playground
  # NOTE: this a custom feature that The Graph implemented for our subgraph. It's not yet
  # available to the public.

  supplyBalanceUnderlying: BigDecimal!
  # FORMULA: supplyBalanceUnderlying = cTokenBalance * market.exchangeRate

  lifetimeSupplyInterestAccrued: BigDecimal!
  # FORMULA: lifetimeSupplyInterestAccrued = supplyBalanceUnderlying - totalUnderlyingSupplied + totalUnderlyingRedeemed

  borrowBalanceUnderlying: BigDecimal!
  # FORMULA: borrowBalanceUnderlying = storedBorrowBalance * market.borrowIndex / accountBorrowIndex

  lifetimeBorrowInterestAccrued: BigDecimal!
  # FORMULA: lifetimeBorrowInterestAccrued = borrowBalanceUnderlying - totalUnderlyingBorrowed + totalUnderlyingRepaid
}

"""
Auxiliary entity for AccountCToken
"""
type AccountCTokenTransaction @entity {
  id: ID!

  account: AccountCToken!

  tx_hash: Bytes!

  timestamp: BigInt!

  block: BigInt!

  logIndex: BigInt!
}

"""
TransferEvent will be stored for every mint, redeem, liquidation, and any normal
transfer between two accounts.
"""
type TransferEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "cTokens transferred"
  amount: BigDecimal!
  "Account that received tokens"
  to: Account!
  "Account that sent tokens"
  from: Account!
  "Block number"
  blockNumber: Int!
  "Block time"
  blockTime: Int!
  "Symbol of the cToken transferred"
  market: Market!
}

"""
MintEvent stores information for mints. From address will always be a cToken
market address
"""
type MintEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "cTokens transferred"
  amount: BigDecimal!
  "Account that received tokens (minter)"
  to: Account!
  "Account that sent tokens (CToken contract)"
  from: Bytes!
  "Block number"
  blockNumber: Int!
  "Block time"
  blockTime: Int!
  "Symbol of the cToken transferred"
  market: Market!
  "Underlying token amount transferred"
  underlyingAmount: BigDecimal
}

"""
RedeemEvent stores information for redeems. To address will always be a
cToken market address
"""
type RedeemEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "cTokens transferred"
  amount: BigDecimal!
  "Account that received tokens (CToken contract)"
  to: Bytes!
  "Account that sent tokens (redeemer)"
  from: Account!
  "Block number"
  blockNumber: Int!
  "Block time"
  blockTime: Int!
  "Symbol of the cToken transferred"
  market: Market!
  "Underlying token amount transferred"
  underlyingAmount: BigDecimal
}

"""
LiquidationEvent stores information for liquidations. The event is emitted from
the cToken market address.
"""
type LiquidationEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "cTokens seized"
  amount: BigDecimal!
  "Liquidator receiving tokens"
  to: Account!
  "Account being liquidated (borrower)"
  from: Account!
  "Block number"
  blockNumber: Int!
  "Block time"
  blockTime: Int!
  "cToken that got liquidated"
  ctoken: Market!
  "Symbol of the underlying asset repaid through liquidation"
  underlying: Token!
  "cToken amount that was repaid by liquidator"
  underlyingRepayAmount: BigDecimal!
}

"""
BorrowEvent stores information for borrows
"""
type BorrowEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "Amount of underlying borrowed"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
  "Account that borrowed the tokens"
  borrower: Account!
  "Block number"
  blockNumber: Int!
  "Block time"
  blockTime: Int!
  "Symbol of the borrowed underlying asset"
  market: Market!
}

"""
RepayEvent stores information for repays. Payer is not always the same as
borrower, such as in the event of a Liquidation
"""
type RepayEvent @entity {
  "Transaction hash concatenated with log index"
  id: ID!
  "Amount of underlying repaid"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
  "Account that borrowed the tokens"
  borrower: Account!
  "Block number"
  blockNumber: Int!
  "Block time"
  blockTime: Int!
  "Symbol of the borrowed underlying asset"
  market: Market!
  "Payer of the borrow funds"
  payer: Account!
}
